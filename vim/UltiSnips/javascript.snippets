snippet fn "Javascript Function Declaration" wm
function $1($2) {
	$0
}
endsnippet
snippet afn "Javascript Function Assignment" wm
$1 = function($2) {
	$0
};
endsnippet
snippet todo "Inline To-Do comment" w
// TODO NJH: $0
endsnippet
snippet log "Console Log" w
console.log($0);
endsnippet
snippet dfd "jQuery Deferred" w
var dfd = $.Deferred();

$0

return dfd;
endsnippet
snippet .prms "jQuery Promise response" i
.done(function(data, textStatus, jqXHR) {
})
.fail(function(jqXHR, textStatus, errorThrown) {
})
.always(function() {
});
endsnippet
snippet .then "jQuery Promise response" i
.then(${1:function(data, textStatus, jqXHR) {
${2: // Done}
}}${3:,
function(jqXHR, textStatus, errorThrown) {
${4: // Fail}
}});
endsnippet
snippet rmodule "Revealing Module Pattern" wm
var $1 = function($2) {
	$0

	// Reveal public pointers to private functions and properties
	return {
	};
}();
endsnippet
snippet floop "JS For loop" wm
for (var i = $1, max = $2; i < max; i +=1) {
	$0
}
endsnippet
snippet ko.cmd "Knockout Command" w
ko.command({
	execute: function() {
		$0
	},
	canExecute: function() {
		return true;
	}
});
endsnippet
snippet ko.acmd "Knockout Async Command" w
ko.asyncCommand({
	execute: function(complete) {
		$0
		return true;
	},
	canExecute: function(isExecuting) {
		return true;
	}
});
endsnippet
snippet ko.obs "Knockout Observable" wm
ko.observable($1);$0
endsnippet
snippet ko.ary "Knockout Observable Array" wm
ko.observableArray(${1:[]});$0
endsnippet
snippet ko.comp "Knockout Computed" wm
ko.computed(function() {
	return$0;
});
endsnippet
snippet ko.pcomp "Knockout Pure Computed" wm
ko.pureComputed(function() {
	return$0;
});
endsnippet
snippet ko.vm "Knockout ViewModel" wm
function $1() {
	if (!(this instanceof $1)) { return new $1(params); }

	var self = this;

	// Data

	// Behaviors

	// Exports
	return this;
}

var vm = new $1();

ko.applyBindings(vm);

module.exports = vm;
endsnippet
snippet ko.wpcomp "Knockout Component (Webpack)" wm
function $1(${2:params}) {
	if (!(this instanceof $1)) { return new $1($2); }

	var self = this;

	// Data
	$0
	// Behaviors

	// Exports
	if ($2 && $2.exports) {
		$2.exports({
		});
	}
	return this;
}

module.exports = {
	viewModel: $1,
	template: require('./$3.html')
};
endsnippet
snippet jd;prm "JSDoc Parameter" b
* @param {${1:Type}} ${2:Name} - ${3:Description}
endsnippet
